-------------------------------------------------------------------------
STEPS TO COMPLETELY REMOVE LEGACY SETTINGS CODE AFTER MIGRATION IS VERIFIED
-------------------------------------------------------------------------

1. Delete the following files:
   - src/Configuration/Settings.cs
   - src/Configuration/SettingsManager.cs
   - src/Configuration/SettingsValidation.cs

2. Remove any remaining references to these files from csproj file.

3. Remove any imports to these classes in files where they're no longer used.

4. Remove the FinalizeMigration method from MacroForm.cs and ConfigurationManager.cs
   once the migration is complete. These are only needed during the transition period.

5. Remove the MacroForm.OnLoadHandler call to FinalizeMigration().

6. Remove any using statements that reference the legacy settings:
   - using NotesAndTasks.Configuration.Settings;

After these steps are completed, the entire application will be using the
new ConfigurationManager singleton instance with proper settings serialization.

The migration preserves all user settings by:
1. Checking for legacy config file (macro_config.json) in the application directory
2. If found, migrating its data to the new format (settings.json) in AppData
3. Making a backup of the legacy file before removing it
4. Using the proper configuration format for all future saves

Benefits of the new system:
- Proper serialization of enum values as strings instead of numeric values
- Consistent file location in AppData/NotesAndTasks
- Singleton pattern for cleaner access to configuration
- Thread-safe operations with reader/writer locks
- Automatic backups with rotation
- Proper validation before saving 